Optionally remove type checking:
* Dynamically determine whether an arg is a channel or not


Control flow structures:
* If-then-else (need to allow mix of lazy and strict args)
* Custom control flow procedures implemented in Python

App procedures:
------------------
* New backends
	- Coasters - talking directly to workers
	- Swift?
	- CIEL
	- JETS	
* local and remote files

GPU support:
------------
* CUDA
* OpenCL


Misc:
----
* Stack overflow avoidance?
* register named input

Arg Handling:
-------------
* Optional args?
* Lists args via Multiple
* Verify() method on type to check that contents are of correct type?


Programming Abstractions:
-------------------------
* Parameter Sweep Primitives
    - combinations, permutations, etc combined with imap
* random number generation


Makefile:
----------
* Implicit rules of Type -> Type
@ruleapp((OFile), (CFile), rename=('%.o', '%.c')) renamerexp?
* register files as sources or intermediates

sources = ["test.c", "test2.c"]
addsources(map(CFile.bind, sources))
 - intermediate files?

* need to be able to inspect file times and trace back to see if fresh
    .isFresh() method on channels that searches back through dependencies
    - need to determine if an channel with missing inputs is out of date or a 
    source: 

Streaming:
* resultbag() could be basis for a stream type

Work stealing + asynchronous evaluation:
* Split Deque data structure

Each thread:
   Stack frame for tasks which have some
   dependencies not started.  Each frame
   is just a tuple of unstarted tasks.
   -----------------
  |                 |
   -----------------                 
   
   Suspended deques which are waiting on
   result of asynchronous evaluation
         ----------------
        |               |  <- task running asynchronously
         ----------------
               ^
               | 
      Tasks which depend on that task

